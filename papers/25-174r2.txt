To: J3                                                     J3/25-174r2
From: generics
Subject: Edits for TEMPLATES: Consistency of deferred args
Date: 2025-October-20
References: 25-135r2, 25-136r2, 25-172, 25-173, 25-139

Introduction:
=============

This is the 5th of 6 papers that provide edits for the approved syntax
for templates.

Section 1:
==========

* Append the following to the new clause introduced in paper 25-138.


tt.8.2 Consistency of deferred argument specifications

tt.8.2.1 General

Within a construct with deferred arguments, a direct specification of
a deferred argument is provided by
    - a <deferred-type-declaration-stmt>,
    - a <deferred-const-declaration-stmt>,
    - a <deferred-proc-declaration-stmt>, or
    - an <interface-body> in a deferred interface block
in the scoping unit where the deferred argument appeared in a
<deferred-arg-name-list>.

{The final portion of the above paragraph might be redundant with Ctt04,
Ctt11, and Ctt15.}

A deferred argument shall have one or more ultimate specifications.  The
ultimate specifications of a deferred argument are:
    - a direct specification, if present, and
    - its ultimate specifications as instantiation arguments in
      REQUIRE statements in the scoping unit where the deferred
      argument appeared in a <deferred-arg-name-list>, if any.
The ultimate specifications of an instantiation argument in a REQUIRE
statement are the ultimate specifications of the corresponding
deferred argument in the referenced requirement construct.

Ctt02 A deferred argument shall have at most one direct specification in
      a given scoping unit.

NOTE 1

    A deferred argument is always explicitly declared within the
    template itself or via a referenced requirement.  A deferred
    argument has at least one ultimate specification.

tt.8.2.2 Specification of deferred types

Ctt17 If any ultimate specification of a deferred argument is a
      deferred type, then all ultimate specifications of that
      deferred argument shall be deferred type.

If any ultimate specification of a deferred type has the EXTENSIBLE
attribute, then the deferred type has the EXTENSIBLE attribute.

If all ultimate specifications of a deferred type have the ABSTRACT
attribute, or if the deferred type has a direct specification
with the ABSTRACT attribute, then the deferred type has the ABSTRACT
attribute. Otherwise the deferred type does not have the ABSTRACT
attribute.

NOTE 1

    A deferred type with the ABSTRACT attribute can only be an
    instantiation argument when the corresponding deferred argument
    has the ABSTRACT attribute. Therefore, if a deferred type has a
    direct specification with the ABSTRACT attribute, all of its
    ultimate specifications need the ABSTRACT attribute too.

NOTE 2

    Examples that illustrate valid and invalid uses of ABSTRACT and
    EXTENSIBLE attributes on deferred types are:

        REQUIREMENT R_REGULAR{U}
	   ! Instantiation arg associated with U can be any non-abstract type.
           DEFERRED TYPE :: U
        END REQUIREMENT

        REQUIREMENT R_EXTENSIBLE{U}
	   ! Instantiation arg associated with U has to be extensible
	   ! (e.g., cannot be intrinsic), and cannot be abstract.
           DEFERRED TYPE, EXTENSIBLE :: U
        END REQUIREMENT

        REQUIREMENT R_ABSTRACT{U}
	   ! Instantiation arg associated with U has to be extensible,
           ! and can be abstract.
           DEFERRED TYPE, ABSTRACT :: U
        END REQUIREMENT

    Given the requirements above and deferred arguments T1, T2, ...,
    T15, the following lines are valid or invalid as marked.

        REQUIRE R_REGULAR{T1} ! Valid, non-extensible

        REQUIRE R_EXTENSIBLE{T2} ! Valid, extensible, non-abstract

        REQUIRE R_ABSTRACT{T3} ! Valid, abstract

	! Valid: T4 is specified to be non-extensible.
        DEFERRED TYPE :: T4   ! Declares T4 to be non-extensible
        REQUIRE R_REGULAR{T4} ! Req. T4 to be non-abstract

	! Invalid
        DEFERRED TYPE :: T5      ! Declares T5 to be non-extensible
        REQUIRE R_EXTENSIBLE{T5} ! Req. T5 to be extensible, non-abstract

	! Invalid
        DEFERRED TYPE :: T6    ! Declares T6 to be non-extensible
        REQUIRE R_ABSTRACT{T6} ! Req. T6 to be extensible

        ! Valid: T7 is specified to be extensible, non-abstract
        DEFERRED TYPE, EXTENSIBLE :: T7 ! Declares T7 to be extensible
        REQUIRE R_REGULAR{T7}           ! Req. T7 to be non-abstract

	! Valid: T8 is specified to be extensible, non-abstract
        DEFERRED TYPE, EXTENSIBLE :: T8 ! Declares T8 to be extensible
        REQUIRE R_EXTENSIBLE{T8} ! Req. T8 to be extensible, non-abstract

        ! Valid: T9 is specified to be extensible, non-abstract
        DEFERRED TYPE, EXTENSIBLE :: T9 ! Declares T9 to be extensible
        REQUIRE R_ABSTRACT{T9}          ! Req. T9 to be extensible

	! Invalid
        DEFERRED TYPE, ABSTRACT :: T10 ! Declares T10 to be abstract
        REQUIRE R_REGULAR{T10}         ! Req. T10 to be non-abstract

	! Invalid
        DEFERRED TYPE, ABSTRACT :: T11 ! Declares T11 to be abstract
        REQUIRE R_EXTENSIBLE{T11}      ! Req. T11 to non-abstract

        ! Valid: specification of T12 to be abstract
        DEFERRED TYPE, ABSTRACT :: T12 ! Declares T12 to be abstract
        REQUIRE R_ABSTRACT{T12}        ! Req. T12 to be extensible

        ! Valid: specification of T13 to be extensible, non-abstract
        REQUIRE R_REGULAR{T13}    ! Req. T13 to be non-abstract
        REQUIRE R_EXTENSIBLE{T13} ! Req. T13 to be extensible, non-abstract

        ! Valid: specification of T14 to be extensible, non-abstract
        REQUIRE R_REGULAR{T14}  ! Req. T14 to be non-abstract
        REQUIRE R_ABSTRACT{T14} ! Req. T14 to be extensible

	! Valid: specification of T15 is extensible, non-abstract
        REQUIRE R_EXTENSIBLE{T15} ! Req. T15 to be extensible, non-abstract
        REQUIRE R_ABSTRACT{T15}   ! Req. T15 to be extensible

tt.8.2.3 Specification of deferred constants

Ctt18 If any ultimate specification of a deferred argument is a
      deferred constant, then all ultimate specifications of
      that deferred argument shall be deferred constant.

Ctt19 All ultimate specifications of a deferred constant shall
      specify the same type and kind type parameters.

Ctt20 If any ultimate specification of a deferred constant is of
      a non-implied rank R, then a direct specification of
      that deferred constant shall have rank R, and all other
      ultimate specifications of that deferred constant shall
      either have implied rank or have rank R.

Ctt21 If any ultimate specification of a deferred constant has
      explicit shape S, then a direct specification of that
      deferred constant shall have shape S, and all other
      ultimate specifications of that deferred constant shall
      have implied rank, implied shape, or shape S.

If any ultimate specification of a deferred constant has an explicit
shape S, then that deferred constant has shape S.  Otherwise, if any
ultimate specification of that deferred constant has implied shape,
then it has implied shape with the same rank.  Otherwise it has
implied rank.

tt.8.2.4 Specification of deferred procedures

Ctt22 If any ultimate specification of a deferred argument is a
      deferred procedure, then all ultimate specifications of
      that deferred argument shall be deferred procedure.

Ctt23 Except for the PURE, SIMPLE, and ELEMENTAL attributes, the
      characteristics of all ultimate specifications of a
      deferred procedure shall be consistent.

NOTE

    The characteristics of a procedure do not include the names
    of the dummy arguments, so they need not be the same.

Ctt24 If any ultimate specification of a deferred procedure is
      SIMPLE, then a direct specification of that deferred
      procedure shall be SIMPLE.

Ctt25 If any ultimate specification of a deferred procedure is
      PURE, then a direct specification of that deferred
      procedure shall be PURE or SIMPLE.

Ctt26 If any ultimate specification of a deferred procedure is
      ELEMENTAL, then a direct specification of that deferred
      procedure shall be ELEMENTAL.

If any ultimate specification of a deferred procedure is SIMPLE then
that deferred procedure is SIMPLE. Otherwise, if any ultimate
specification of that deferred procedure is PURE, then it is PURE.

If any ultimate specification of a deferred procedure is ELEMENTAL then
that deferred procedure is ELEMENTAL.

If the names of the dummy arguments of a deferred procedure are the
same in all of its ultimate specifications, then those are the names
of its dummy arguments; otherwise, if the deferred procedure has a
direct specification, the direct specification defines the
names of its dummy arguments; otherwise, the names of its dummy
arguments are processor dependent.

Ctt27 A deferred procedure shall not be referenced with a keyword
      argument if it has any dummy argument whose name is processor
      dependent.


  The following examples demonstrate when it is valid to reference a
  deferred procedure with keyword arguments:

  REQUIREMENT R1(T, S, ...)
    (\textit{Declares subroutine S dummy argument names to be X and Y})
    ...

  REQUIREMENT R2(T, S, ...)
    (\textit{Declares subroutine S dummy argument names to be X and Y})
    ...

  REQUIREMENT R3(T, S, ...)
    (\textit{Declares subroutine S dummy argument names to be A and B})
    ...

  TEMPLATE T1(T, S, ...)
    REQUIRE R1(T, S, ...)
  CONTAINS
    SUBROUTINE EXAMPLE(c, d)
      TYPE(T), INTENT(INOUT) :: c, d
      CALL S(x = c, y = d) ! valid
    END SUBROUTINE
  END TEMPLATE

  TEMPLATE T2(T, S, ...)
    REQUIRE R1(T, S, ...)
    REQUIRE R2(T, S, ...)
  CONTAINS
    SUBROUTINE EXAMPLE(c, d)
      TYPE(T), INTENT(INOUT) :: c, d
      CALL S(x = c, y = d) ! valid
    END SUBROUTINE
  END TEMPLATE

  TEMPLATE T3(T, S, ...)
    REQUIRE R1(T, S, ...)
    REQUIRE R3(T, S, ...)
  CONTAINS
    SUBROUTINE EXAMPLE(c, d)
      TYPE(T), INTENT(INOUT) :: c, d
      CALL S(x = c, y = d) ! invalid
    END SUBROUTINE
  END TEMPLATE

  TEMPLATE T4(T, S, ...)
    REQUIRE R1(T, S, ...)
    REQUIRE R3(T, S, ...)

    DEFERRED INTERFACE
      SUBROUTINE S(w, z)
        TYPE(T), INTENT(INOUT) :: w, z
      END SUBROUTINE
    END INTERFACE
  CONTAINS
    SUBROUTINE EXAMPLE(c, d)
      TYPE(T), INTENT(INOUT) :: c, d
      CALL S(w = c, z = d) ! valid
    END SUBROUTINE
  END TEMPLATE

===END===
